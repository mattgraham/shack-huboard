App.CreditCardForm = Ember.Controller.extend
  actions: 
    close: -> 
      this.send "closeModal"

  key : '<%= ENV["STRIPE_PUBLISHABLE_API"] %>'

  processingCard: false
  
  number: null
  cvc: null
  exp: null
  expMonth: (->
    if @get("exp")
      return Ember.$.payment.cardExpiryVal(@get("exp")).month || "MM"

    "MM"
  ).property("exp")
  expYear: (->
    if @get("exp")
      return Ember.$.payment.cardExpiryVal(@get("exp")).year || "YYYY"
    "YYYY"
  ).property("exp")

  cardType: (->
    Ember.$.payment.cardType(@get('number'))
  ).property('number')

  process:  ->
    @set('processingCard', true)
    Stripe.setPublishableKey(@get('key'))
    
    Stripe.card.createToken({
      number: @get('number')
      cvc: @get('cvc')
      exp_month: @get('expMonth')
      exp_year: @get('expYear')
    }, @didProcessToken.bind(this))
  

App.UpdateCardController = App.CreditCardForm.extend
  didProcessToken: (status, response) ->
    if response.error
      @set('processingCard', false)
      @set('errors', response.error.message)
    else
      @set('errors', "")
      @postUpdate(response)

  postUpdate: (token) ->
    this.ajax("/settings/profile/" + @get("model.org.login") + "/card", {
      email:@get("model.org.billing_email"),
      card: token
    }).then(@didUpdate.bind(this))

  didUpdate: (response) ->
    @set('processingCard', false)
    @set('model.card.details.card',response.card)
    @send "close"

  ajax: (url, data) ->
    controller = this

    new Ember.RSVP.Promise (resolve, reject) ->
      hash = {}
      hash.url = url
      hash.type = 'PUT'
      hash.context = controller
      hash.data = data
      
      hash.success = (json) ->
        resolve(json)

      hash.error = (jqXHR, textStatus, errorThrown) ->
        reject(jqXHR)

      Ember.$.ajax(hash)

App.UpdateCardView = App.ModalView.extend 
  processingCard: Ember.computed.alias('controller.processingCard')

App.PurchaseFormController = App.CreditCardForm.extend

  coupon: null

  isDisabled: (->
    @get("isProcessing") or @get('errors')
  ).property("isProcessing","errors")

  onCouponChange: (->
    errors = @get 'errors'
    @set 'errors', null if errors
  ).observes('coupon')
  
  price: (->
    @get("model.amount")
  ).property("plan.amount")
  

  didProcessToken: (status, response) ->
    if response.error
      @set('processingCard', false)
      @set('errors', response.error.message)
    else
      @postCharge(response)
  
  postCharge: (token) ->
    this.ajax("/settings/charge/" + @get("model.org.login"), {
      email:@get("model.org.billing_email"),
      card: token,
      coupon: @get("coupon")
      plan: @get("model.plan")
    }).then(@didPurchase.bind(this), @purchaseDidError.bind(this))

  didPurchase: (response) ->
    @set('processingCard', false)
    @set("model.plan.purchased", true)
    @set("model.details.card", response.card)
    
    @set 'model.details.discount', response.discount
    @set 'model.details.has_plan', true

    this.send("close")
    
  purchaseDidError: (error) ->
    @set('errors', JSON.parse(error.responseText).error.message)
    @set('processingCard', false)

  didRejectCoupon: (error, statusText) ->
    @set('errors', JSON.parse(error.responseText).error.message)

  clearCouponAlerts: ->
    @set('errors', null)
       
  ajax: (url, data, verb) ->
    controller = this

    new Ember.RSVP.Promise (resolve, reject) ->
      hash = {}
      hash.url = url
      hash.type = verb || 'POST'
      hash.context = controller
      hash.data = data
      
      hash.success = (json) ->
        resolve(json)

      hash.error = (jqXHR, textStatus, errorThrown) ->
        reject(jqXHR)

      Ember.$.ajax(hash)

  actions:
    couponChanged: ->
      coupon_id = @get('coupon')
      return @clearCouponAlerts() if coupon_id == ""
      @ajax("/settings/coupon_valid/" + coupon_id,{}, "GET")
        .then(success=(->), @didRejectCoupon.bind(this))

  
App.PurchaseFormView = App.ModalView.extend 
  processingPurchase: Ember.computed.alias('controller.processingCard')

App.CancelFormController = Ember.Controller.extend
  processingAction: false
  actions: 
    close: -> 
      this.send "closeModal"
    cancel:  ->
      @set('processingAction', true)
      this.ajax("/settings/profile/" + @get("model.org.login") + "/plans/" + @get('model.plan.id'),{})
        .then(@didCancel.bind(this), @cancelDidError.bind(this))
  didCancel: ->
    @set('model.details.has_plan', false)
    @set('model.details.discount', null)
    @set('processingAction', false)
    @set("model.plan.purchased", false)
    @set("model.details.card", null)
    this.send "closeModal"
  cancelDidError: (error) ->
    @set('errors', error.responseJSON.error.message)
    @set('processingAction', false)



  ajax: (url, data) ->
    controller = this

    new Ember.RSVP.Promise (resolve, reject) ->
      hash = {}
      hash.url = url
      hash.type = 'DELETE'
      hash.context = controller
      hash.data = data
      
      hash.success = (json) ->
        resolve(json)

      hash.error = (jqXHR, textStatus, errorThrown) ->
        reject(jqXHR)

      Ember.$.ajax(hash)

App.CancelFormView = App.ModalView.extend 
  processingAction: Ember.computed.alias('controller.processingAction')

App.CouponController = Ember.Mixin.create
  processingAction: false

  onCouponChange: (->
    errors = @get 'errors'
    @set 'errors', null if errors
  ).observes('coupon')

  ajax: (url, data, verb) ->
    controller = this

    new Ember.RSVP.Promise (resolve, reject) ->
      hash = {}
      hash.url = url
      hash.type = verb || 'GET'
      hash.context = controller
      hash.data = data
      
      hash.success = (json) ->
        resolve(json)

      hash.error = (jqXHR, textStatus, errorThrown) ->
        reject(jqXHR)

      Ember.$.ajax(hash)

  didRejectCoupon: (error, statusText) ->
    @set('errors', JSON.parse(error.responseText).error.message)
    @set('processingAction', false)

  didAcceptCoupon: (response) ->
    @send('close')
    @set('processingAction', false)
    @set('model.details.discount', response.discount)

  clearCouponAlerts: ->
    @set('errors', null)

App.ApplyCouponController = Ember.ObjectController.extend App.CouponController,
  coupon: null
  customer: Ember.computed.alias('model.details.card.customer')
  isDisabled: ( ->
    @get('errors') or @get('processingAction')
  ).property('errors')

  actions:
    apply_coupon: ->
      coupon_id = @get('coupon')
      customer = @get('customer')
      @set('processingAction', true)
      @ajax("/settings/redeem_coupon/" + customer,{coupon: coupon_id}, "PUT")
        .then(@didAcceptCoupon.bind(this), @didRejectCoupon.bind(this))
        
    couponChanged: ->
      coupon_id = @get('coupon')
      return @clearCouponAlerts() if coupon_id == ""
      @ajax("/settings/coupon_valid/" + coupon_id,{}, "GET")
        .then(success=(->), @didRejectCoupon.bind(this))

    close: ->
      this.send "closeModal"

App.ApplyCouponView = App.ModalView.extend
  processingAction: Ember.computed.alias('controller.processingAction')

Ember.TextSupport.reopen
 attributeBindings: ["data-stripe", "autocomplete", "autocompletetype", "required"]

App.CvcField = Ember.TextField.extend
  required: true
  #pattern: "\d*"
  autocompletetype: "cc-csc"
  format: "123"
  placeholder: Ember.computed.alias("format")
  autocomplete: "off"
  didInsertElement: ->
    @$().payment("formatCardCVC")

App.CardNumberField = Ember.TextField.extend
  required: true
  #pattern: "\d*"
  autocompletetype: "cc-number"
  format: "1234 5678 9012 3456"
  placeholder: Ember.computed.alias("format")
  didInsertElement: ->
    @$().payment("formatCardNumber")

App.CardExpiryField = Ember.TextField.extend
  required: true
  autocompletetype: "cc-exp"
  format: "MM / YY"
  placeholder: Ember.computed.alias("format")
  didInsertElement: ->
    @$().payment("formatCardExpiry")

App.CouponCodeField = Ember.TextField.extend
  required: false
  format: "CODE"
  placeholder: Ember.computed.alias("format")
  change: ->
    controller = @get('targetObject')
    controller.send 'couponChanged'

App.CouponCheckbox = Ember.Checkbox.extend
  required: false

    
